// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/muchiko/go_grpc_chat/pb (interfaces: ChatServiceClient,ChatService_TransportClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/muchiko/go_grpc_chat/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockChatServiceClient is a mock of ChatServiceClient interface
type MockChatServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceClientMockRecorder
}

// MockChatServiceClientMockRecorder is the mock recorder for MockChatServiceClient
type MockChatServiceClientMockRecorder struct {
	mock *MockChatServiceClient
}

// NewMockChatServiceClient creates a new mock instance
func NewMockChatServiceClient(ctrl *gomock.Controller) *MockChatServiceClient {
	mock := &MockChatServiceClient{ctrl: ctrl}
	mock.recorder = &MockChatServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatServiceClient) EXPECT() *MockChatServiceClientMockRecorder {
	return m.recorder
}

// Transport mocks base method
func (m *MockChatServiceClient) Transport(arg0 context.Context, arg1 ...grpc.CallOption) (pb.ChatService_TransportClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transport", varargs...)
	ret0, _ := ret[0].(pb.ChatService_TransportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transport indicates an expected call of Transport
func (mr *MockChatServiceClientMockRecorder) Transport(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockChatServiceClient)(nil).Transport), varargs...)
}

// MockChatService_TransportClient is a mock of ChatService_TransportClient interface
type MockChatService_TransportClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_TransportClientMockRecorder
}

// MockChatService_TransportClientMockRecorder is the mock recorder for MockChatService_TransportClient
type MockChatService_TransportClientMockRecorder struct {
	mock *MockChatService_TransportClient
}

// NewMockChatService_TransportClient creates a new mock instance
func NewMockChatService_TransportClient(ctrl *gomock.Controller) *MockChatService_TransportClient {
	mock := &MockChatService_TransportClient{ctrl: ctrl}
	mock.recorder = &MockChatService_TransportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatService_TransportClient) EXPECT() *MockChatService_TransportClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockChatService_TransportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockChatService_TransportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockChatService_TransportClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockChatService_TransportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockChatService_TransportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_TransportClient)(nil).Context))
}

// Header mocks base method
func (m *MockChatService_TransportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockChatService_TransportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockChatService_TransportClient)(nil).Header))
}

// Recv mocks base method
func (m *MockChatService_TransportClient) Recv() (*pb.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockChatService_TransportClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChatService_TransportClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockChatService_TransportClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockChatService_TransportClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_TransportClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockChatService_TransportClient) Send(arg0 *pb.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockChatService_TransportClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatService_TransportClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockChatService_TransportClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockChatService_TransportClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_TransportClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockChatService_TransportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockChatService_TransportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockChatService_TransportClient)(nil).Trailer))
}
